// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v5.29.3
// source: cache_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  type ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  type Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";

export interface Product {
  id: string;
  name: string;
  price: number;
  description: string;
  stock: number;
  category: string;
}

export interface GetRequest {
  key: string;
}

export interface GetResponse {
  value?: Product | undefined;
}

export interface SetResponse {
  message: string;
}

export interface SetRequest {
  key: string;
  value?: Product | undefined;
  ttlSeconds: number;
}

export interface InvalidateRequest {
  key: string;
}

export interface InvalidateResponse {
  message: string;
}

function createBaseProduct(): Product {
  return { id: "", name: "", price: 0, description: "", stock: 0, category: "" };
}

export const Product: MessageFns<Product> = {
  encode(message: Product, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.price !== 0) {
      writer.uint32(25).double(message.price);
    }
    if (message.description !== "") {
      writer.uint32(34).string(message.description);
    }
    if (message.stock !== 0) {
      writer.uint32(40).int32(message.stock);
    }
    if (message.category !== "") {
      writer.uint32(50).string(message.category);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Product {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProduct();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 25) {
            break;
          }

          message.price = reader.double();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.stock = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.category = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Product {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      price: isSet(object.price) ? globalThis.Number(object.price) : 0,
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      stock: isSet(object.stock) ? globalThis.Number(object.stock) : 0,
      category: isSet(object.category) ? globalThis.String(object.category) : "",
    };
  },

  toJSON(message: Product): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.price !== 0) {
      obj.price = message.price;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.stock !== 0) {
      obj.stock = Math.round(message.stock);
    }
    if (message.category !== "") {
      obj.category = message.category;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Product>, I>>(base?: I): Product {
    return Product.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Product>, I>>(object: I): Product {
    const message = createBaseProduct();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.price = object.price ?? 0;
    message.description = object.description ?? "";
    message.stock = object.stock ?? 0;
    message.category = object.category ?? "";
    return message;
  },
};

function createBaseGetRequest(): GetRequest {
  return { key: "" };
}

export const GetRequest: MessageFns<GetRequest> = {
  encode(message: GetRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetRequest {
    return { key: isSet(object.key) ? globalThis.String(object.key) : "" };
  },

  toJSON(message: GetRequest): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetRequest>, I>>(base?: I): GetRequest {
    return GetRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetRequest>, I>>(object: I): GetRequest {
    const message = createBaseGetRequest();
    message.key = object.key ?? "";
    return message;
  },
};

function createBaseGetResponse(): GetResponse {
  return { value: undefined };
}

export const GetResponse: MessageFns<GetResponse> = {
  encode(message: GetResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.value !== undefined) {
      Product.encode(message.value, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.value = Product.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetResponse {
    return { value: isSet(object.value) ? Product.fromJSON(object.value) : undefined };
  },

  toJSON(message: GetResponse): unknown {
    const obj: any = {};
    if (message.value !== undefined) {
      obj.value = Product.toJSON(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetResponse>, I>>(base?: I): GetResponse {
    return GetResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetResponse>, I>>(object: I): GetResponse {
    const message = createBaseGetResponse();
    message.value = (object.value !== undefined && object.value !== null)
      ? Product.fromPartial(object.value)
      : undefined;
    return message;
  },
};

function createBaseSetResponse(): SetResponse {
  return { message: "" };
}

export const SetResponse: MessageFns<SetResponse> = {
  encode(message: SetResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.message !== "") {
      writer.uint32(10).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SetResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.message = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetResponse {
    return { message: isSet(object.message) ? globalThis.String(object.message) : "" };
  },

  toJSON(message: SetResponse): unknown {
    const obj: any = {};
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetResponse>, I>>(base?: I): SetResponse {
    return SetResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetResponse>, I>>(object: I): SetResponse {
    const message = createBaseSetResponse();
    message.message = object.message ?? "";
    return message;
  },
};

function createBaseSetRequest(): SetRequest {
  return { key: "", value: undefined, ttlSeconds: 0 };
}

export const SetRequest: MessageFns<SetRequest> = {
  encode(message: SetRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      Product.encode(message.value, writer.uint32(18).fork()).join();
    }
    if (message.ttlSeconds !== 0) {
      writer.uint32(24).int64(message.ttlSeconds);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SetRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = Product.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.ttlSeconds = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetRequest {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? Product.fromJSON(object.value) : undefined,
      ttlSeconds: isSet(object.ttlSeconds) ? globalThis.Number(object.ttlSeconds) : 0,
    };
  },

  toJSON(message: SetRequest): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = Product.toJSON(message.value);
    }
    if (message.ttlSeconds !== 0) {
      obj.ttlSeconds = Math.round(message.ttlSeconds);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetRequest>, I>>(base?: I): SetRequest {
    return SetRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetRequest>, I>>(object: I): SetRequest {
    const message = createBaseSetRequest();
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null)
      ? Product.fromPartial(object.value)
      : undefined;
    message.ttlSeconds = object.ttlSeconds ?? 0;
    return message;
  },
};

function createBaseInvalidateRequest(): InvalidateRequest {
  return { key: "" };
}

export const InvalidateRequest: MessageFns<InvalidateRequest> = {
  encode(message: InvalidateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InvalidateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInvalidateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InvalidateRequest {
    return { key: isSet(object.key) ? globalThis.String(object.key) : "" };
  },

  toJSON(message: InvalidateRequest): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<InvalidateRequest>, I>>(base?: I): InvalidateRequest {
    return InvalidateRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<InvalidateRequest>, I>>(object: I): InvalidateRequest {
    const message = createBaseInvalidateRequest();
    message.key = object.key ?? "";
    return message;
  },
};

function createBaseInvalidateResponse(): InvalidateResponse {
  return { message: "" };
}

export const InvalidateResponse: MessageFns<InvalidateResponse> = {
  encode(message: InvalidateResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.message !== "") {
      writer.uint32(10).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InvalidateResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInvalidateResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.message = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InvalidateResponse {
    return { message: isSet(object.message) ? globalThis.String(object.message) : "" };
  },

  toJSON(message: InvalidateResponse): unknown {
    const obj: any = {};
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<InvalidateResponse>, I>>(base?: I): InvalidateResponse {
    return InvalidateResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<InvalidateResponse>, I>>(object: I): InvalidateResponse {
    const message = createBaseInvalidateResponse();
    message.message = object.message ?? "";
    return message;
  },
};

export type CacheServiceService = typeof CacheServiceService;
export const CacheServiceService = {
  getCache: {
    path: "/cache_service.CacheService/GetCache",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetRequest): Buffer => Buffer.from(GetRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): GetRequest => GetRequest.decode(value),
    responseSerialize: (value: Product): Buffer => Buffer.from(Product.encode(value).finish()),
    responseDeserialize: (value: Buffer): Product => Product.decode(value),
  },
  setCache: {
    path: "/cache_service.CacheService/SetCache",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: SetRequest): Buffer => Buffer.from(SetRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): SetRequest => SetRequest.decode(value),
    responseSerialize: (value: SetResponse): Buffer => Buffer.from(SetResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): SetResponse => SetResponse.decode(value),
  },
  invalidateCache: {
    path: "/cache_service.CacheService/InvalidateCache",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: InvalidateRequest): Buffer => Buffer.from(InvalidateRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): InvalidateRequest => InvalidateRequest.decode(value),
    responseSerialize: (value: InvalidateResponse): Buffer => Buffer.from(InvalidateResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): InvalidateResponse => InvalidateResponse.decode(value),
  },
} as const;

export interface CacheServiceServer extends UntypedServiceImplementation {
  getCache: handleUnaryCall<GetRequest, Product>;
  setCache: handleUnaryCall<SetRequest, SetResponse>;
  invalidateCache: handleUnaryCall<InvalidateRequest, InvalidateResponse>;
}

export interface CacheServiceClient extends Client {
  getCache(request: GetRequest, callback: (error: ServiceError | null, response: Product) => void): ClientUnaryCall;
  getCache(
    request: GetRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: Product) => void,
  ): ClientUnaryCall;
  getCache(
    request: GetRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: Product) => void,
  ): ClientUnaryCall;
  setCache(request: SetRequest, callback: (error: ServiceError | null, response: SetResponse) => void): ClientUnaryCall;
  setCache(
    request: SetRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: SetResponse) => void,
  ): ClientUnaryCall;
  setCache(
    request: SetRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: SetResponse) => void,
  ): ClientUnaryCall;
  invalidateCache(
    request: InvalidateRequest,
    callback: (error: ServiceError | null, response: InvalidateResponse) => void,
  ): ClientUnaryCall;
  invalidateCache(
    request: InvalidateRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: InvalidateResponse) => void,
  ): ClientUnaryCall;
  invalidateCache(
    request: InvalidateRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: InvalidateResponse) => void,
  ): ClientUnaryCall;
}

export const CacheServiceClient = makeGenericClientConstructor(
  CacheServiceService,
  "cache_service.CacheService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): CacheServiceClient;
  service: typeof CacheServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
