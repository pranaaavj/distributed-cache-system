"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v5.29.3
// source: cache_service.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.CacheServiceClient = exports.CacheServiceService = exports.InvalidateResponse = exports.InvalidateRequest = exports.SetRequest = exports.SetResponse = exports.GetResponse = exports.GetRequest = exports.Product = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
const grpc_js_1 = require("@grpc/grpc-js");
function createBaseProduct() {
    return { id: "", name: "", price: 0, description: "", stock: 0, category: "" };
}
exports.Product = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.name !== "") {
            writer.uint32(18).string(message.name);
        }
        if (message.price !== 0) {
            writer.uint32(25).double(message.price);
        }
        if (message.description !== "") {
            writer.uint32(34).string(message.description);
        }
        if (message.stock !== 0) {
            writer.uint32(40).int32(message.stock);
        }
        if (message.category !== "") {
            writer.uint32(50).string(message.category);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseProduct();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 25) {
                        break;
                    }
                    message.price = reader.double();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.stock = reader.int32();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.category = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            price: isSet(object.price) ? globalThis.Number(object.price) : 0,
            description: isSet(object.description) ? globalThis.String(object.description) : "",
            stock: isSet(object.stock) ? globalThis.Number(object.stock) : 0,
            category: isSet(object.category) ? globalThis.String(object.category) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.price !== 0) {
            obj.price = message.price;
        }
        if (message.description !== "") {
            obj.description = message.description;
        }
        if (message.stock !== 0) {
            obj.stock = Math.round(message.stock);
        }
        if (message.category !== "") {
            obj.category = message.category;
        }
        return obj;
    },
    create(base) {
        return exports.Product.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseProduct();
        message.id = object.id ?? "";
        message.name = object.name ?? "";
        message.price = object.price ?? 0;
        message.description = object.description ?? "";
        message.stock = object.stock ?? 0;
        message.category = object.category ?? "";
        return message;
    },
};
function createBaseGetRequest() {
    return { key: "" };
}
exports.GetRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { key: isSet(object.key) ? globalThis.String(object.key) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        return obj;
    },
    create(base) {
        return exports.GetRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetRequest();
        message.key = object.key ?? "";
        return message;
    },
};
function createBaseGetResponse() {
    return { value: undefined };
}
exports.GetResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.value !== undefined) {
            exports.Product.encode(message.value, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.value = exports.Product.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { value: isSet(object.value) ? exports.Product.fromJSON(object.value) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.value !== undefined) {
            obj.value = exports.Product.toJSON(message.value);
        }
        return obj;
    },
    create(base) {
        return exports.GetResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetResponse();
        message.value = (object.value !== undefined && object.value !== null)
            ? exports.Product.fromPartial(object.value)
            : undefined;
        return message;
    },
};
function createBaseSetResponse() {
    return { message: "" };
}
exports.SetResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.message !== "") {
            writer.uint32(10).string(message.message);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.message = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { message: isSet(object.message) ? globalThis.String(object.message) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.message !== "") {
            obj.message = message.message;
        }
        return obj;
    },
    create(base) {
        return exports.SetResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSetResponse();
        message.message = object.message ?? "";
        return message;
    },
};
function createBaseSetRequest() {
    return { key: "", value: undefined, ttlSeconds: 0 };
}
exports.SetRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== undefined) {
            exports.Product.encode(message.value, writer.uint32(18).fork()).join();
        }
        if (message.ttlSeconds !== 0) {
            writer.uint32(24).int64(message.ttlSeconds);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.value = exports.Product.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.ttlSeconds = longToNumber(reader.int64());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? globalThis.String(object.key) : "",
            value: isSet(object.value) ? exports.Product.fromJSON(object.value) : undefined,
            ttlSeconds: isSet(object.ttlSeconds) ? globalThis.Number(object.ttlSeconds) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        if (message.value !== undefined) {
            obj.value = exports.Product.toJSON(message.value);
        }
        if (message.ttlSeconds !== 0) {
            obj.ttlSeconds = Math.round(message.ttlSeconds);
        }
        return obj;
    },
    create(base) {
        return exports.SetRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSetRequest();
        message.key = object.key ?? "";
        message.value = (object.value !== undefined && object.value !== null)
            ? exports.Product.fromPartial(object.value)
            : undefined;
        message.ttlSeconds = object.ttlSeconds ?? 0;
        return message;
    },
};
function createBaseInvalidateRequest() {
    return { key: "" };
}
exports.InvalidateRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseInvalidateRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { key: isSet(object.key) ? globalThis.String(object.key) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        return obj;
    },
    create(base) {
        return exports.InvalidateRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseInvalidateRequest();
        message.key = object.key ?? "";
        return message;
    },
};
function createBaseInvalidateResponse() {
    return { message: "" };
}
exports.InvalidateResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.message !== "") {
            writer.uint32(10).string(message.message);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseInvalidateResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.message = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { message: isSet(object.message) ? globalThis.String(object.message) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.message !== "") {
            obj.message = message.message;
        }
        return obj;
    },
    create(base) {
        return exports.InvalidateResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseInvalidateResponse();
        message.message = object.message ?? "";
        return message;
    },
};
exports.CacheServiceService = {
    getCache: {
        path: "/cache_service.CacheService/GetCache",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(exports.GetRequest.encode(value).finish()),
        requestDeserialize: (value) => exports.GetRequest.decode(value),
        responseSerialize: (value) => Buffer.from(exports.Product.encode(value).finish()),
        responseDeserialize: (value) => exports.Product.decode(value),
    },
    setCache: {
        path: "/cache_service.CacheService/SetCache",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(exports.SetRequest.encode(value).finish()),
        requestDeserialize: (value) => exports.SetRequest.decode(value),
        responseSerialize: (value) => Buffer.from(exports.SetResponse.encode(value).finish()),
        responseDeserialize: (value) => exports.SetResponse.decode(value),
    },
    invalidateCache: {
        path: "/cache_service.CacheService/InvalidateCache",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(exports.InvalidateRequest.encode(value).finish()),
        requestDeserialize: (value) => exports.InvalidateRequest.decode(value),
        responseSerialize: (value) => Buffer.from(exports.InvalidateResponse.encode(value).finish()),
        responseDeserialize: (value) => exports.InvalidateResponse.decode(value),
    },
};
exports.CacheServiceClient = (0, grpc_js_1.makeGenericClientConstructor)(exports.CacheServiceService, "cache_service.CacheService");
function longToNumber(int64) {
    const num = globalThis.Number(int64.toString());
    if (num > globalThis.Number.MAX_SAFE_INTEGER) {
        throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
    }
    if (num < globalThis.Number.MIN_SAFE_INTEGER) {
        throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
    }
    return num;
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=cache_service.js.map