"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v5.29.3
// source: product.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProductServiceClient = exports.ProductServiceService = exports.DeleteProductRequest = exports.UpdateProductRequest = exports.CreateProductRequest = exports.GetProductRequest = exports.Product = exports.Empty = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
const grpc_js_1 = require("@grpc/grpc-js");
function createBaseEmpty() {
    return {};
}
exports.Empty = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEmpty();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.Empty.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseEmpty();
        return message;
    },
};
function createBaseProduct() {
    return { id: "", name: "", price: 0, description: "", stock: 0, category: "" };
}
exports.Product = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.name !== "") {
            writer.uint32(18).string(message.name);
        }
        if (message.price !== 0) {
            writer.uint32(25).double(message.price);
        }
        if (message.description !== "") {
            writer.uint32(34).string(message.description);
        }
        if (message.stock !== 0) {
            writer.uint32(40).int32(message.stock);
        }
        if (message.category !== "") {
            writer.uint32(50).string(message.category);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseProduct();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 25) {
                        break;
                    }
                    message.price = reader.double();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.stock = reader.int32();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.category = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            price: isSet(object.price) ? globalThis.Number(object.price) : 0,
            description: isSet(object.description) ? globalThis.String(object.description) : "",
            stock: isSet(object.stock) ? globalThis.Number(object.stock) : 0,
            category: isSet(object.category) ? globalThis.String(object.category) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.price !== 0) {
            obj.price = message.price;
        }
        if (message.description !== "") {
            obj.description = message.description;
        }
        if (message.stock !== 0) {
            obj.stock = Math.round(message.stock);
        }
        if (message.category !== "") {
            obj.category = message.category;
        }
        return obj;
    },
    create(base) {
        return exports.Product.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseProduct();
        message.id = object.id ?? "";
        message.name = object.name ?? "";
        message.price = object.price ?? 0;
        message.description = object.description ?? "";
        message.stock = object.stock ?? 0;
        message.category = object.category ?? "";
        return message;
    },
};
function createBaseGetProductRequest() {
    return { id: "" };
}
exports.GetProductRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetProductRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        return obj;
    },
    create(base) {
        return exports.GetProductRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetProductRequest();
        message.id = object.id ?? "";
        return message;
    },
};
function createBaseCreateProductRequest() {
    return { name: "", price: 0, description: "", stock: 0, category: "" };
}
exports.CreateProductRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        if (message.price !== 0) {
            writer.uint32(17).double(message.price);
        }
        if (message.description !== "") {
            writer.uint32(26).string(message.description);
        }
        if (message.stock !== 0) {
            writer.uint32(32).int32(message.stock);
        }
        if (message.category !== "") {
            writer.uint32(42).string(message.category);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCreateProductRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 17) {
                        break;
                    }
                    message.price = reader.double();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.stock = reader.int32();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.category = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            price: isSet(object.price) ? globalThis.Number(object.price) : 0,
            description: isSet(object.description) ? globalThis.String(object.description) : "",
            stock: isSet(object.stock) ? globalThis.Number(object.stock) : 0,
            category: isSet(object.category) ? globalThis.String(object.category) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.price !== 0) {
            obj.price = message.price;
        }
        if (message.description !== "") {
            obj.description = message.description;
        }
        if (message.stock !== 0) {
            obj.stock = Math.round(message.stock);
        }
        if (message.category !== "") {
            obj.category = message.category;
        }
        return obj;
    },
    create(base) {
        return exports.CreateProductRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCreateProductRequest();
        message.name = object.name ?? "";
        message.price = object.price ?? 0;
        message.description = object.description ?? "";
        message.stock = object.stock ?? 0;
        message.category = object.category ?? "";
        return message;
    },
};
function createBaseUpdateProductRequest() {
    return { id: "", name: "", price: 0, description: "", stock: 0, category: "" };
}
exports.UpdateProductRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.name !== "") {
            writer.uint32(18).string(message.name);
        }
        if (message.price !== 0) {
            writer.uint32(25).double(message.price);
        }
        if (message.description !== "") {
            writer.uint32(34).string(message.description);
        }
        if (message.stock !== 0) {
            writer.uint32(40).int32(message.stock);
        }
        if (message.category !== "") {
            writer.uint32(50).string(message.category);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateProductRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 25) {
                        break;
                    }
                    message.price = reader.double();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.stock = reader.int32();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.category = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            price: isSet(object.price) ? globalThis.Number(object.price) : 0,
            description: isSet(object.description) ? globalThis.String(object.description) : "",
            stock: isSet(object.stock) ? globalThis.Number(object.stock) : 0,
            category: isSet(object.category) ? globalThis.String(object.category) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.price !== 0) {
            obj.price = message.price;
        }
        if (message.description !== "") {
            obj.description = message.description;
        }
        if (message.stock !== 0) {
            obj.stock = Math.round(message.stock);
        }
        if (message.category !== "") {
            obj.category = message.category;
        }
        return obj;
    },
    create(base) {
        return exports.UpdateProductRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdateProductRequest();
        message.id = object.id ?? "";
        message.name = object.name ?? "";
        message.price = object.price ?? 0;
        message.description = object.description ?? "";
        message.stock = object.stock ?? 0;
        message.category = object.category ?? "";
        return message;
    },
};
function createBaseDeleteProductRequest() {
    return { id: "" };
}
exports.DeleteProductRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeleteProductRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        return obj;
    },
    create(base) {
        return exports.DeleteProductRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseDeleteProductRequest();
        message.id = object.id ?? "";
        return message;
    },
};
exports.ProductServiceService = {
    getProduct: {
        path: "/product_service.ProductService/GetProduct",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(exports.GetProductRequest.encode(value).finish()),
        requestDeserialize: (value) => exports.GetProductRequest.decode(value),
        responseSerialize: (value) => Buffer.from(exports.Product.encode(value).finish()),
        responseDeserialize: (value) => exports.Product.decode(value),
    },
    createProduct: {
        path: "/product_service.ProductService/CreateProduct",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(exports.CreateProductRequest.encode(value).finish()),
        requestDeserialize: (value) => exports.CreateProductRequest.decode(value),
        responseSerialize: (value) => Buffer.from(exports.Product.encode(value).finish()),
        responseDeserialize: (value) => exports.Product.decode(value),
    },
    updateProduct: {
        path: "/product_service.ProductService/UpdateProduct",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(exports.UpdateProductRequest.encode(value).finish()),
        requestDeserialize: (value) => exports.UpdateProductRequest.decode(value),
        responseSerialize: (value) => Buffer.from(exports.Product.encode(value).finish()),
        responseDeserialize: (value) => exports.Product.decode(value),
    },
    deleteProduct: {
        path: "/product_service.ProductService/DeleteProduct",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(exports.DeleteProductRequest.encode(value).finish()),
        requestDeserialize: (value) => exports.DeleteProductRequest.decode(value),
        responseSerialize: (value) => Buffer.from(exports.Empty.encode(value).finish()),
        responseDeserialize: (value) => exports.Empty.decode(value),
    },
};
exports.ProductServiceClient = (0, grpc_js_1.makeGenericClientConstructor)(exports.ProductServiceService, "product_service.ProductService");
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=product.js.map